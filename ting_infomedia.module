<?php

// load field hooks
module_load_include('inc', 'ting_infomedia', 'ting_infomedia.field');
module_load_include('inc', 'ting_infomedia' , 'ting_infomedia.wrapper');

/**
 * Implements hook_menu
 */
/*
function ting_infomedia_menu() {
  $items['ting/infomedia/%'] = array(
    'title' => 'Infomedia',
    'page callback' => 'ting_infomedia_view',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}
*/

/**
 * Page callback function
 *
 * Return a render array
 */
function ting_infomedia_view($id) {
return array(
    '#markup' => '<div id="article-wrapper">' . render(ting_infomedia_parse_article($id)). '</div>',
    '#theme' => 'ting_infomedia_article',
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'ting_infomedia') . '/ting_infomedia_article_view.css'),
    ),
  );
}


/**
 * Implements hook_theme
 * Set template for viewing ting_infomedia articles.
 * Set theme-function for displaying a link (field) to ting_infomedia
 *
 * @existing; array of existing themes
 * @type; which type is being process (module,base_theme_engine,theme_engine,base_theme,theme)
 * @theme; name of $type being processed
 * @path; directory path of them or module
 *
 * return a render array http://randyfay.com/node/79
 */
function ting_infomedia_theme($existing, $type, $theme, $path) {
  $render_array = array();
  // page view definitions - view articles
  $render_array['ting_infomedia_article'] = array(
    'template' => 'ting_infomedia_article_view',
    'render element' => 'element',
  );

  return $render_array;
}


/**
 * Return stripped path. e.g /ting/infomedia/33514212 -> /ting/infomedia
 */
function ting_infomedia_strip_path($path) {
  $parts = explode('/', $path);
  if( isset($parts[0]) && isset($parts[1]) ) {
    return $parts[0] . '/' . $parts[1];
  }
  return FALSE;
}

/**
 * Inline relation types and their titles.
 */
function ting_infomedia_get_ting_relations() {
  static $types;
  if (!$types) {
    $types = array(
      'dbcaddi:hasOnlineAccess' => t('Article from Infomedia'),
    );
  }
  return $types;
}

function ting_infomedia_ding_anchor_info() {
  $relations =  ting_infomedia_get_ting_relations();
  // We need to know what kind of hasOnlineAccess
  // is provided with this object and return relevant anchor information.
  $object = menu_get_object('ting_object', 2);
  if ($object->getAc_source() != 'Artikler') {
    unset($relations['dbcaddi:hasOnlineAccess']);
  }
  return $relations;
}

/**
 * Implements hook_form_FORM_ID_alter()
 * Adding infomedia url form field to ting configuration form
 */
function ting_infomedia_form_ting_admin_ting_settings_alter(&$form, &$form_state) {
  $form['ting']['ting_infomedia_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Infomedia web service URL'),
    '#description' => t('URL to the infomedia webservice (access to infomedia article base) , e.g. http://useraccessinfomedia.addi.dk/1.1/'),
    '#required' => TRUE,
    '#default_value' => variable_get('ting_infomedia_url', ''),
  );
}

/**
 * retrive article from infomedia. Parse for errors, clean html and add html for errorhandling if needed.
 * return the parsed html
 */
function ting_infomedia_parse_article($id) {
  $html = FALSE;
  $obj = ting_infomedia_get_article($id);

  if( !empty($obj->error)) {
    return ting_infomedia_parse_for_errors($obj);
  }
  else {
    foreach($obj->parts as $part=>$val) {
      if($message = ting_infomedia_parse_for_article_error($val) ) {
        $val['article'] = $message;
      }
      $html = $val['article'];
      // for now simply return the first article. TODO handle more articles
      ting_infomedia_clean_html($html);
    }
  }
  return $html;
}

/**
 * Parse for general (user and/or library) errors and take appropiate action if errors are found.
 * return string; if no errors an empty, if errors html-formatted with error string
 */
function ting_infomedia_parse_for_errors(TingClientInfomediaResult $result, &$error = FALSE) {
  if ($result->error) {
    $error = array(
      '#markup' => $result->error,
      '#prefix' => '<div class="infomedia_error">',
      '#suffix' => '</div>'
    );
  }
  return $error;
}

/**
 * Parse for error on article-level. Not verified, empty etc.
 * parameter $part - an array holding Ã³ne article
 */
function ting_infomedia_parse_for_article_error($part) {
  if( !$part['verified'] ) {
    return t('Article not verified');
  }
  if( empty($part['article']) ) {
    return t('Article not found on infomedia');
  }
  return FALSE;
}


function ting_infomedia_clean_html(&$html) {
  $patterns = array();
  $patterns[0] = '/<p id="[.+]">/';
  $patterns[1] = '/<hl2>/';
  $patterns[2] = '/<\/hl2>/';
  $replacements = array();
  $replacements[0] = '<p>';
  $replacements[1] = '<h4>';
  $replacements[2] = '</h4>';

  preg_replace($patterns, $replacements, $html);
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * Tells panels where to find the .inc files that define various
 * args, contexts & content_types.
 */
function ting_infomedia_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implement hook_ctools_plugin_api().
 *
 * If you do this, CTools will pick up default panels pages in
 * <modulename>.pages_default.inc
 */
function ting_infomedia_ctools_plugin_api($module, $api) {
  if ($module == 'panels_mini' && $api == 'panels_default') {
    return array('version' => 1);
  }
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

